{"ast":null,"code":"var _jsxFileName = \"/Users/robertmitchell/Documents/the_pour_choice/myra-chatbot/frontend/src/components/ChatbotUI.js\",\n  _s = $RefreshSig$();\n// myra-chatbot/frontend/src/components/ChatbotUI.js\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./ChatbotUI.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatbotUI = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const sessionId = \"myra-session\";\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const newMessages = [...messages, {\n      sender: \"user\",\n      text: input\n    }];\n    setMessages(newMessages);\n    setInput(\"\");\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/chatbot\", {\n        sessionId,\n        userMessage: input\n      });\n      setMessages([...newMessages, {\n        sender: \"myra\",\n        text: response.data.response\n      }]);\n    } catch (error) {\n      setMessages([...newMessages, {\n        sender: \"myra\",\n        text: \"Oops, Myra is having a bad day. Try again later!\"\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Ask Myra about wine...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatbotUI, \"bxrUXnlHDt+zalfpk8IFX5tJV48=\");\n_c = ChatbotUI;\nexport default ChatbotUI;\nvar _c;\n$RefreshReg$(_c, \"ChatbotUI\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ChatbotUI","_s","messages","setMessages","input","setInput","sessionId","sendMessage","trim","newMessages","sender","text","response","post","userMessage","data","error","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/robertmitchell/Documents/the_pour_choice/myra-chatbot/frontend/src/components/ChatbotUI.js"],"sourcesContent":["// myra-chatbot/frontend/src/components/ChatbotUI.js\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./ChatbotUI.css\";\n\nconst ChatbotUI = () => {\n    const [messages, setMessages] = useState([]);\n    const [input, setInput] = useState(\"\");\n    const sessionId = \"myra-session\";\n\n    const sendMessage = async () => {\n        if (!input.trim()) return;\n\n        const newMessages = [...messages, { sender: \"user\", text: input }];\n        setMessages(newMessages);\n        setInput(\"\");\n\n        try {\n            const response = await axios.post(\"http://localhost:5000/api/chatbot\", {\n                sessionId,\n                userMessage: input\n            });\n            \n            setMessages([...newMessages, { sender: \"myra\", text: response.data.response }]);\n        } catch (error) {\n            setMessages([...newMessages, { sender: \"myra\", text: \"Oops, Myra is having a bad day. Try again later!\" }]);\n        }\n    };\n\n    return (\n        <div className=\"chatbot-container\">\n            <div className=\"chatbot-messages\">\n                {messages.map((msg, index) => (\n                    <div key={index} className={`message ${msg.sender}`}>\n                        <span>{msg.text}</span>\n                    </div>\n                ))}\n            </div>\n            <div className=\"chatbot-input\">\n                <input \n                    type=\"text\" \n                    value={input} \n                    onChange={(e) => setInput(e.target.value)} \n                    placeholder=\"Ask Myra about wine...\" \n                />\n                <button onClick={sendMessage}>Send</button>\n            </div>\n        </div>\n    );\n};\n\nexport default ChatbotUI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}